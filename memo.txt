forEach,for of,map使い分け
forEach:配列.forEachの形で使用
コールバック関数の引数として要素の値,インデックス,配列を受け取れる
for of
シンプルにかける。インデックスの取得は難しい
map:新しい配列を返す
forEachと同様の引数を受け取る。
変数に代入することが期待されている。
jsx内ではこれの方がいい？

        {/*
         {
          data.map((point,i) => {
            let index;
             species.forEach((value,i) => {
              if(value.name == point.species) {
                index = i;
              }
            }) 
          if(species[index] && species[index].flag)
            return <circle cx={xScale(point[horizontalAxis])} cy={yScale(point[verticalAxis])} fill={species[index].color} r="5" key={i}></circle>
            
          })
        }
      */}

      
  /*
  useEffect(() => {
    /*
    const xMin = Math.min.apply(null,data.map(data => data[horizontalAxis]));
    const xMax = Math.max.apply(null,data.map(data => data[horizontalAxis]));
    const yMin = Math.round(Math.min.apply(null,data.map(data => data[verticalAxis])));
    const yMax = Math.round(Math.max.apply(null,data.map(data => data[verticalAxis])));
    const x = [], y = [];
    
      for(let i = xMin; i <= xMax; i += xMargin) {
        i = Math.round(i*10)/10;
        x.push(i);
      }

      for(let i = yMin; i <= yMax; i += yMargin) {
        // 丸め誤差の修正
        i = Math.round(i*10)/10;
        y.push(i);
      }
      */
      // 種類ステートの情報

      /*
      setXArray(x);
      setYArray(y);
  },[data])
  */

  /* function Select(props) {
  const { data, horizontalAxis, verticalAxis } = props;

  const extractAxis = () => {
    const array = [];
    if (data) {
      Object.keys(data[0]).forEach((value, i) => {
        if (!isNaN(value)) {
          array.push(value);
        }
      });
    }
    return array;
  };

  const [axisData, setAxisData] = useState(extractAxis());

  const handleChange = (event) => {
    if (event.target.name === 'vertical') {
      props.setVertical(event.target.value);
    } else if (event.target.name === 'horizontal') {
      props.setHorizontal(event.target.value);
    }
  };

  return (
    <div>
      <h2>Vertical Axis</h2>
      <select name="vertical" value={verticalAxis} onChange={handleChange}>
        {axisData.map((data, i) => (
          <option key={i}>{data}</option>
        ))}
      </select>
      <h2>Horizontal Axis</h2>
      <select name="horizontal" value={horizontalAxis} onChange={handleChange}>
        {axisData.map((data, i) => (
          <option key={i}>{data}</option>
        ))}
      </select>
    </div>
  );
} */

/*   const xScale = props.xScale;
  const yScale = props.yScale;
  const horizontalAxis = props.horizontalAxis;
  const verticalAxis = props.verticalAxis; */




















  import { useState, useEffect } from 'react';
import * as d3 from "d3";

function Select(props) {
  const {axisData,setHorizontal,setVertical,horizontalAxis,verticalAxis} = props;

  const changeAxis = (event) => {
    if(event.target.name == "horizontal") {
      setHorizontal(event.target.value);
    } else if(event.target.name == "vertical") {
      setVertical(event.target.value);
    }
  }

  return <div>
    <h2>Horizontal Axis</h2>
    <select name="horizontal" defaultValue={horizontalAxis} onChange={changeAxis}>
      { axisData &&
        axisData.map((data,i) => <option key={i}>{data}</option>)
      }
    </select>
    <h2>Vertical Axis</h2>
    <select name="vertical" defaultValue={verticalAxis} onChange={changeAxis}>
      { axisData &&
        axisData.map((data,i) => <option key={i}>{data}</option>)
      }
    </select>
  </div>
}

function Axis(props) {
  const {xScale,yScale,horizontalAxis,verticalAxis} = props;

  return <g>
    <line x1="100" y1="500" x2="500" y2="500" stroke="black"></line>
    <line x1="100" y1="100" x2="100" y2="500" stroke="black"></line>
    <text x="300" y="550" textAnchor="middle">{horizontalAxis}</text>
    <text x="50" y="300" textAnchor='middle' transform='rotate(270,50,300)'>{verticalAxis}</text>
    {
      xScale.ticks().map((value,i) => {
        const len = xScale.ticks().length-1;
        return <g transform={`translate(${(i/len)*400+100},500)`} key={i}>
          <line y1="5" stroke="black"></line>
          <text y="5" textAnchor='middle' dominantBaseline="text-before-edge">{value}</text>
        </g>
      })
    }
    {
      yScale.ticks().map((value,i) => {
        const len = yScale.ticks().length-1;
        return <g transform={`translate(100,${500-(i/len)*400})`} key={i}>
          <line x1="-5" stroke="black"></line>
          <text x="-5" textAnchor="end" dominantBaseline="central">{value}</text>
        </g>
      })
    }
  </g>
}

function Legend(props) {
  const {species,setSpecies} = props;

  const changeFlag = (index) => {
    setSpecies(species.map((value, j) => {
        return {
          name: value.name,
          color: value.color,
          flag: index === j ? !value.flag : value.flag,
        }
      })
    )}
      
  return <g>
    {
      species.map((value,i) => {
        return <g transform={`translate(500,${i*30+100})`} key={i}>
            <rect x="0" y="0" width="10" height="10" fill={value.color}></rect>
            <text x="15" dominantBaseline="central" onClick={() => changeFlag(i)}
            style={{cursor:"pointer"}}>{value.name}</text>
          </g>
      })
    }
  </g>
}



function Graph(props) {
  const data = props.data;
  const [axisData,setAxisData] = useState("");
  const [horizontalAxis,setHorizontal] = useState("");
  const [verticalAxis,setVertical] = useState("");
  const [species,setSpecies] = useState([]);
  const color = d3.scaleOrdinal(d3.schemeCategory10);

  const xScale = d3.scaleLinear()
                    .domain(d3.extent(data,d=>d[horizontalAxis]))
                    .range([0,400])
                    .nice();
  const yScale = d3.scaleLinear()
                   .domain(d3.extent(data,d=>d[verticalAxis]))
                   .range([0,400])
                   .nice();

  useEffect(() => {
    const array = Array.from(new Set(data.map(data => data.species)));
/*     if(data) {
      Object.keys(data[0]).forEach((value,i) => {
        console.log(value);
      })
    } */

    setAxisData(["sepalLength","sepalWidth","petalLength","petalWidth"]);

    setHorizontal(axisData[0]);
    setVertical(axisData[1]);

    setSpecies(array.map((value,i) => {
      return {
        name:value,
        color:color(i),
        flag:true,
      }
    }))
  },[data]);

  return <div>
    <h1>Scatter Plot of Iris Flower Dataset</h1>

    <Select axisData={axisData} horizontalAxis={horizontalAxis} verticalAxis={verticalAxis} setHorizontal={setHorizontal} setVertical={setVertical} ></Select>
    <svg width="600" height="600">
      <Axis xScale={xScale} yScale={yScale}
            horizontalAxis={horizontalAxis} verticalAxis={verticalAxis}></Axis>
      <Legend species={species} setSpecies={setSpecies}></Legend>
      <g transform='translate(100,500) scale(1,-1)'>
      {data.map((point, i) => {
        const index = species.findIndex((value) => value.name === point.species);
        if (index !== -1 && species[index].flag) {
          return (
            <circle
              cx={xScale(point[horizontalAxis])}
              cy={yScale(point[verticalAxis])}
              fill={species[index].color}
              r="5"
              style={{transitionDuration:"500ms"}}
              key={i}
            />
          );
        }
        return null;
      })}
      </g>
    </svg>
  </div>
}

export default function App() {
  const url = "https://s3-us-west-2.amazonaws.com/s.cdpn.io/2004014/iris.json";
  const [data,setData] = useState([]);

  useEffect(() => {
    fetch(url)
      .then(res => res.json())
      .then(res => setData(res))
  },[]);

  return <div>
    <Graph data={data} />
  </div>
}